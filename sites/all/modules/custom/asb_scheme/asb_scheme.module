<?php

function asb_scheme_init() {
  ctools_include('ajax');
}

/**
* Implements hook_entity_info_alter().
*/
function asb_scheme_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_teaser'] = array(
    'label' => t('Search teaser'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_preprocess_node().
*/
function asb_scheme_preprocess_node(&$vars) {
  // dsm($vars);
  if($vars['view_mode'] == 'search_teaser') {
    // dsm($vars);
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__search_teaser';
    $vars['leader'] = asb_scheme_get_scheme_leader($vars['nid']);
    $vars['leader_markup'] = '<div class="scheme-leader"><a href="/user/' .$vars['leader']['uid'] .'">';
    $vars['leader_markup'] .= $vars['leader']['name'] .'</a></div>';
    // Create markup for completed schemes.
    // unset($vars['content']['goals']);
    if(isset($vars['field_issues_goals'][0])) {
      $link_markup = l($vars['field_issues_goals'][0]['entity']->title,
                       'node/' .$vars['field_issues_goals'][0]['target_id'],
                       array('attributes' => array(
                           'class' => array('issue-link'))));
      $vars['content']['issues']['#markup'] = $link_markup;
    }
    // dsm($vars);
    unset($vars['content']['field_issues_goals']);
    $vars['fans'] = '1005';
    $vars['people_count'] = '69';
  }
} 


function asb_scheme_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // dsm($data);
  // dsm($router_item);
  // dsm($root_path);
  // Add a tab linking to ajax loading tab on scheme pages
  if(isset($router_item['page_arguments'][0]->type)) {
  if($router_item['page_arguments'][0]->type == 'scheme') {
    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Updates'),
        'href' => 'asb_scheme/nojs/scheme_content',
        'localized_options' => array(
          'attributes' => array(
            'title' => t('Show scheme updates'),
            'id' => 'asb-scheme-ajax-link',
          ),
        ),
      ),
    
      // Define whether this link is active. This can be omitted for
      // implementations that add links to pages outside of the current page
      // context.
      '#active' => ($router_item['path'] == $root_path),
    );
    $count = count($data['tabs'][0]['output']);
    $data['tabs'][0]['count'] == $count;
  }
  }
}

function asb_scheme_theme_registry_alter(&$theme_registry) {
  // dsm($theme_registry);
  if (isset($theme_registry['menu_local_task'])) {
    $theme_registry['menu_local_task']['function'] = 'theme_asb_scheme_local_task'; // The new theme function.
  }
} 

function theme_asb_scheme_local_task(&$variables) {
  // dsm($variables);
  // dsm("Hi dad");
 $link = $variables['element']['#link'];
  $link_text = $link['title'];

  if (!empty($variables['element']['#active'])) {
    // Add text to indicate active tab for non-visual users.
    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';

    // If the link does not contain HTML already, check_plain() it now.
    // After we set 'html'=TRUE the link will not be sanitized by l().
    if (empty($link['localized_options']['html'])) {
      $link['title'] = check_plain($link['title']);
    }
    $link['localized_options']['html'] = TRUE;
    $link_text = t('!local-task-title!active', array('!local-task-title' => $link['title'], '!active' => $active));
  }
  if(isset($link['localized_options']['attributes']['id']) && $link['localized_options']['attributes']['id'] == 'asb-scheme-ajax-link') {
    
    // return '<li' . (!empty($variables['element']['#active']) ? ' class="active ctools-use-ajax"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";   
    // Returns an ajax response tab containing the scheme updates view url
    return '<li' . (!empty($variables['element']['#active']) ? ' class="active ctools-use-ajax"' : '') . '>' .ctools_ajax_text_button( 'Updates', 'asb_scheme/nojs/scheme_content/page/' .arg(1), t('Get view content.')) . "</li><!-- Added in asb_scheme module line 61. -->\n";
  }else{ 
    return '<li' . (!empty($variables['element']['#active']) ? ' class="active"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";
  }
}

function asb_scheme_menu() {
  $items = array();
  $items['asb_scheme/%ctools_js/scheme_content/%/%'] = array(
    'title' => "Updates",
    'page callback' => 'asb_scheme_display_view',
    'page arguments' => array(1,2,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Renders a view via ajax
 * @param $view_name
 *  The view name to render
 * @param $display_name
 *  The display name of the view to render
 * @param $gid
 *  The organic group id supplied as argument to the view
 *  and used to render og specific modal dialog forms
 */
function asb_scheme_display_view($js = NULL, $view_name, $display_name, $gid) {
  // display view via ajax depending on $view_name and $display name
   $view = views_get_view($view_name);
   $view->set_display($display_name);
   $view->set_arguments(array($gid));
   // Node types we want modals for.
   $node_types = array('update');
   $header = asb_modal_settings($gid, $node_types);
   // dsm($header);
   $options = array(
     'id' => 'area',
     'table' => 'views',
     'field' => 'area',
     'empty' => TRUE,
     'content' => $header,
     'format' => 'full_html',
     'tokenize' => 0,
   );
   $view->display_handler->set_option('header', array('text' => $options));
   // dsm($view->page);
   $view->execute();
   $output = $view->render();
   // dsm($output);
   if($js) {
     ctools_include('ajax');
     $commands = array();
     // $commands[] = ajax_command_html('#add-view', $output);
     $commands[] = ajax_command_html('#scheme-content', $output);
     print ajax_render($commands);

   }else{
     return $output;
   }
       
}

/**
 * Implements hook_form_alter
 */
function asb_scheme_form_alter(&$form, &$form_state, $form_id) {
  // dsm($form_state);
  if (isset($form_state['view']->filter['field_issues_goals_target_id'])) {
    $issues = asb_scheme_get_issues();
    $issue_list = array();

    foreach($issues as $key => $issue) {
      $issue_list[] = array(
        'title' => t($issue->title),
        'operator' => "=",
        'value' => array(
          'value' => $issue->nid,
          'min' => '',
          'max' => '',
        )
      );
      $form['field_issues_goals_target_id']['#options'][] = t($issue->title);
      // dsm($form);
    }
    $newarray = array(
      'title' => t("Democracy"),
      'operator' => "=",
      'value' => array(
        'value' => '23',
        'min' => '',
        'max' => '',
      )
    );
    unset($form_state['view']->display_handler->handlers['filter']['field_issues_goals_target_id']->options['group_info']['group_items']);
    foreach($issue_list as $key => $issue) {
      $form_state['view']->display_handler->handlers['filter']['field_issues_goals_target_id']->options['group_info']['group_items'][] = $issue;
    }
    // dsm($form_state['view']);
  }
  // dsm($form_state['view']);

  // Check if the form has steps and add progress markup.
  if($form_id == 'scheme_node_form' && arg(2) != 'edit') {
    $form['actions']['submit']['#submit'][] = 'asb_scheme_redirect_success';
  }
  if(!empty($form['#steps']) && arg(2) != 'edit') {
    // Add scheme title to the steps display
    // TODO: May want to add settings to include images
    // to the progress markup.
    $output = '<div id="stepper-add-scheme"><ul>';
    // oldschool
    $i = 1;
    foreach($form['#steps'] as $step_name => $step) {
      if( $form_state['storage']['step'] == $step_name) {
        $output .= '<li class="current '. $step_name . '">' . $i . '<span>' . $step_name . '</span></li>';
      }else{
        $output .= '<li class="'. $step_name . '">' . $i . '<span>' . $step_name . '</span></li>';
      }
      $i ++;
    }
    $output .= '</ul></div>';
    $form['progress'] = array(
      '#markup' => $output,
      '#weight' => 150,
    );
    // Add scheme title to each step
    if(!empty($form_state['values']['title'])) {
      $title_out = '<h2 class="scheme-title">' .$form_state['values']['title'] .'</h2>';
      $form['temptitle'] = array(
        '#markup' => $title_out,
        '#weight' => -10,
      );
    }
  }
}

function asb_scheme_get_issues() {
  $sql = "SELECT nid, title FROM {node} WHERE type = 'issue' ORDER BY title";
  $result = db_query($sql);
  $results = $result->fetchAll();
  return $results;
}
    
/**
 * Implements hook_form_submit
 */

function asb_scheme_redirect_success($form, &$form_state) {
  // Redirect to custom page solution
  $form_state['redirect'] = 'scheme-created/' .$form_state['nid'];
}

/**
 * Implements hook_block_info().
 *
 * Add a custom group statistics and attendees blocks.
 */
function asb_scheme_block_info() {
  $blocks['group_info'] = array(
    'info' => t('Scheme Leader'),
    'cache' => DRUPAL_NO_CACHE
    // DRUPAL_CACHE_PER_ROLE will be assumed if not set.
  );
  $blocks['node_links'] = array(
    'info' => t('Scheme content links'),
    'cache' => DRUPAL_NO_CACHE
    // DRUPAL_CACHE_PER_ROLE will be assumed if not set.
  );
  return $blocks;
}

/**
 * Implement hook_theme().
 */
function asb_scheme_theme() {
  $module_path = drupal_get_path('module', 'asb_scheme');

  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );

  return array(
    'asb_scheme_group_info' => $base + array(
      'render element' => 'element',
      'template' => 'asb-scheme-group-info',
    ),
    'asb_scheme_group_links' => $base + array(
      'render element' => 'element',
      'template' => 'og-extras-group-links',
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Add a custom group statistics and create content blocks.
 */
function asb_scheme_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'group_info':
      // The info block is visible to everyone, group member or not.
      $content = theme('asb_scheme_group_info');
      if (!empty($content)) {
        $block['subject'] = t('Scheme Leader');
        $block['content'] = $content;
        // $block['content'] = "Hi schemer!";
      }
      break;

    case 'node_links':
      // Links are visible to people with permissions.
      $content = theme('asb_scheme_group_links');
      if (!empty($content)) {
        $block['subject'] = t('Create content');
        $block['content'] = $content;
      }
      break;

  }
  return $block;
}

/**
 * Creates the scheme create content links.
 */
function asb_scheme_node_links() {
  $group = og_context();

  $types = array();
  foreach (node_type_get_types() as $type) {
    if (og_is_group_content_type('node', $type->type)) {
      $types[$type->type] = $type->type;
    }
  }

  $content = og_node_create_links($group['group_type'], $group['gid'], OG_AUDIENCE_FIELD, NULL, NULL);
  return drupal_render($content);
}

/**
 * Implements hook_node_view
 */
function asb_scheme_node_view($node, $view_mode, $langcode){
  switch ($node->type) {
    case 'issue':
      $node->content['links']['issue_reference_link'] = array(
        '#weight' => 100, // place it at the bottom
        '#markup' => '<div class="add-goal">' .l('Recommend a goal', 'node/add/goal', array('query' => array('field_issue_reference' => $node->nid))) .'</div>',
      );
    case 'scheme':
      // Make changes to scheme node views add markup to content variable.
      drupal_add_css(drupal_get_path('module', 'asb_scheme') . '/css/progress.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
      drupal_add_library('jquery_plugin', 'cycle');
      drupal_add_js(drupal_get_path('module', 'asb_scheme') . '/js/asb-scheme.js', 'file');
      // Create progress bar markup
      if (isset($node->field_progress['und'][0])) {
        $progress = $node->field_progress['und'][0]['value'];
        if( is_numeric($progress) && $progress > 0 && $progress <= 100 ) {
          $progress_string = strval(round($progress));
          $progress_decimal = asb_scheme_val_to_dec($progress);
          $style = "width: ".round($progress)."%; display: block";
          $node->content['field_progress'][0]['#markup'] = '<div class="progress-bar" data-progress="' .$progress_decimal[1]; 
          $node->content['field_progress'][0]['#markup'] .= '"><div class="progress" style="width:'.$progress_decimal[0] .'%">&nbsp;</div></div>';
          $node->content['field_progress'][0]['#markup'] .= '<div class="scheme-major-ticks"><div class="scheme-minor-ticks"></div></div>';
          $node->content['field_progress'][0]['#markup'] .= '<!-- Progress bar code built in asb_scheme_node_view() -->';
        }else{
          unset($node->content['field_progress']);
        }
        
      }
      // Create issues/goals markup
      if (isset($node->field_issues_goals['und'])) {
        // dsm($node);
        $issues_goals = asb_scheme_format_issues_goals($node);
        /* Add markup for issues */
        $node->content['issues'] = array(
          '#weight' => -100,
          '#markup' => $issues_goals['issues'],
        );
        /* Add markup for goals */
        $node->content['goals'] = array(
          '#weight' => -99,
          '#markup' => $issues_goals['goals'],
        );
      }
      /* Here we unset images if a video exists. */
      /* if (isset($node->content['field_video'])) { */
      /*     unset($node->content['field_image']); */
      /* } */
      $node->content['format_created'] = array(
        '#weight' => -101,
        '#markup' => date('j/m/y', $node->created),
      );
      $node->content['group_group'][0]['#title'] = "Request Membership";
      if ($view_mode == 'search_teaser') {
        // Here we modify values for the search teaser view mode
        $node->content['field_leader'] = array();
        $leader = asb_scheme_get_scheme_leader($node->nid);
        $node->content['field_leader'][0]['#markup'] = '<div class="scheme-leader"><a href="/user/' .$leader['uid'] .'">';
        $node->content['field_leader'][0]['#markup'] .= $leader['name'] .'</a></div><!-- Added in asb_scheme_node_view -->';
        // set field_people_needs as count
        $people_needs_count = count($node->field_people_needs['und']);
        unset($node->content['field_people_needs']);
        $node->content['field_people_needs'][0]['#markup'] = $people_needs_count;
        // set field_material_needs as count
        $material_needs_count = count($node->field_material_needs['und']);
        unset($node->content['field_material_needs']);
        $node->content['field_material_needs'][0]['#markup'] = $material_needs_count;
        $funding_needs_count = asb_scheme_funds_raised();
        unset($node->content['field_funding_needs']);
        $node->content['field_funding_needs'][0]['#markup'] = $funding_needs_count;
      }
      // dsm($node);

      break;
  }
}

/**
 * Format issues and goals for a scheme.
 */
function asb_scheme_format_issues_goals($node) {
  $output['issues'] = '';
  $output['goals'] = '';
  foreach ($node->field_issues_goals['und'] as $key => $value) {
    if(isset($value['entity'])) {
      if ($value['entity']->type == 'issue') {
        $output['issues'] = $value['entity']->title;
      }elseif ($value['entity']->type == 'goal') {
        $output['goals'] .= '<li><a href="/node/' .$value['target_id'] .'">'
          .$value['entity']->title .'</a></li>';
      }
    }
  }
  return $output;
}

/**
 * Function to get needs contribute row counts
 * to show total Material and Skills needs
 *
 * TODO: Expand this to include funding needs
 * once we have a mechanism to measure that.
 */
function asb_scheme_get_view_rowcount(){
  $view = views_get_current_view();

  // Check view need_type and return markup for the template.
  if(!empty($view->need_type)) {
    if($view->need_type == 'funds') {
      $funds_raised = asb_scheme_funds_raised();
      return '<h1 class="funds-raised">$' .$funds_raised .'</h1>';
    }
    if($view->need_type == 'skill') {
      $text = "skills displayed.";
    }elseif($view->need_type == 'supplies') {
      $text = "supplies displayed.";
    }
    $page_total = count($view->result);
    if(isset($view->total_rows)){
      return '<h6 class="needs-count">' . $page_total . " of " . $view->total_rows ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    } else {
      return '<h6 class="needs-count">' . $page_total . " of " . $page_total ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    }
  }
}

/**
 * Add designation for skills v. supplies in
 * scheme_contribute view.  For populating
 * correct text to the view template for counts
 * of completed schemes.
 *
 * used by asb_scheme_get_view_rowcount
 */
function asb_scheme_views_pre_render(&$view) {
  if($view->name == 'scheme_contribute') {
    if($view->current_display == 'block') {
      $view->need_type = 'skill';
    }
    if($view->current_display == 'block_1') {
      $view->need_type = 'supplies';
    }
    if($view->current_display == 'block_2') {
      $view->need_type = 'funds';
    }
  }
  // dsm($view);
}

/**
 * helper function to turn value into decimal string.
 */
function asb_scheme_val_to_dec($num) {
  $num_var = array();
  $num = strval(round($num));
  $decimal = "." .$num;
  $num_var[] = $num;
  $num_var[] = $decimal;
  return $num_var;
}

/**
 * helper function to get the amount of funds
 * raised for the specific scheme.
 * TODO: Get actual funds raised.
 */
function asb_scheme_funds_raised() {
  $raised = rand(1, 1000);
  return $raised;
}

/**
 * Get scheme owner(s)
 */
function asb_scheme_get_scheme_leader($gid) {
  $sql = "SELECT u.uid, name FROM users u 
              INNER JOIN og_membership ogm ON u.uid = ogm.etid 
              INNER JOIN og_users_roles our ON ogm.etid = our.uid 
              WHERE ogm.gid = '$gid'
              AND ogm.entity_type = 'user' 
              AND our.rid = 3 AND our.gid = '$gid'";

  $user_list = db_query($sql)->fetchAll();
  $scheme_owner = array('name' => $user_list[0]->name, 
                          'uid' => $user_list[0]->uid);
  return $scheme_owner;
}

/**** BEGIN rules configuration ****/
/**
 * Implements hook_action_info()
 *
 * Including rules here because for some reason
 * rules was not picking up the rules.inc file
 *
 */
function asb_scheme_action_info() {
  return array(
    'asb_scheme_email_facilitator_action' => array(
      'type' => 'system',
      'label' => t('Email Facilitator on scheme creation'),
      'configurable' => TRUE,
      'triggers' => array('node_presave', 'node_insert', 'node_update'),
    ),
    'asb_scheme_remind_facilitator_action' => array(
      'type' => 'system',
      'label' => t('Email reminder to facilitator'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}


/**
 * Sends email to facilitator on scheme creation
 */
function asb_scheme_email_facilitator_action($node, $context) {
  $result = db_query('SELECT DISTINCT u.mail FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = 6');
  // Now, actually send the mails.
  $params = array(
    'subject' => $context['subject'],
    'message' => $context['message'],
  );

  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $key = 'alert';
  $message = array('result' => TRUE);
  foreach ($result as $row) {
    $message = drupal_mail('asb_scheme', $key, $row->mail, language_default(), $params, $from);
    watchdog('action', 'Sent facilitator email to %email', array('%email' => $row->mail));
    if (!$message['result']) {
      break;
    }
  }
  // dsm($message['result']);
}

/**
 * Notifies facilitators of unchanged schemes.
 */
function asb_scheme_remind_facilitator_action(&$entity, $context = array()) {
  global $base_url;
  if(date("D h",time()) == "Mon 08") {
    $sql = "SELECT node.title, workflow_node.nid, field_facilitator_target_id AS fftid, users.mail 
          FROM {workflow_node} 
          LEFT JOIN {node} 
          ON node.nid = workflow_node.nid 
          JOIN {field_revision_field_facilitator}
          ON field_revision_field_facilitator.entity_id = node.nid 
          JOIN {users} 
          ON users.uid = field_facilitator_target_id 
          WHERE stamp < (UNIX_TIMESTAMP() - 604800) 
          AND sid = 2";
    $result = db_query($sql);
    //dsm($result);
    $facs = array();
    foreach($result as $row) {
      $scheme = '<a href="' .$base_url .'/node/' .$row->nid .'">' .$row->title .'</a>';
      $facs[$row->mail]['uid'] = $row->fftid;
      if(isset($facs[$row->mail]['scheme_link'])) {
        $facs[$row->mail]['scheme_link'] .= $scheme ."\n";
      }else{
        $facs[$row->mail]['scheme_link'] = $scheme ."\n";
      }
    }

    // Create message text for each facilitator
    foreach($facs as $key => $value) {
      $facs[$key]['message'] = "Hi ASB Facilitator,\n\nThese schemes seem neglected, could you check?\n\n";
      $facs[$key]['message'] .= $facs[$key]['scheme_link'];
      $facs[$key]['message'] .= "\n\nYour Action Switchboard Auto-bot!";

      // Now, actually send the mails.
      $params = array(
        'subject' => 'Schemers need you!',
        'message' => $facs[$key]['message'],
      );
      $from = variable_get('site_mail', ini_get('sendmail_from'));
      $mail_key = 'reminder';
      $message = array('result' => TRUE);
      $message = drupal_mail('asb_scheme', $mail_key, $key, language_default(), $params, $from);
      watchdog('action', 'Sent facilitator reminder to %email', array('%email' => $key));
      if (!$message['result']) {
        break;
      }
    }
  }
}


/**
 * Generates settings form for asb_scheme_email_facilitator().
 *
 * @param $context
 *   An array of options of this action (in case it is being edited)
 *
 * @return array $form
 *
 * @see asb_scheme_action_info()
 */
function asb_scheme_email_facilitator_action_form($context) {
  /*
  * We return a configuration form to set the requirements that will
  * match this action before being executed. This is a regular Drupal form and
  * may include any type of information you want, but all the fields of the
  * form will be saved into the $context variable.
  *
  * In this case we are emailing a programmatically chosen facilitator.
  *
  */
  $form['subject'] = array(
    '#title' => t('Subject'),
    '#type' => 'textfield',
    '#description' => t('Subject line of the email message.'),
    '#default_value' => isset($context['subject']) ? $context['subject'] : '',
  );
  $form['message'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
    '#description' => t('Message to send to the facilitator.'),
    '#default_value' => isset($context['message']) ? $context['message'] : '',
  );
  $form['tokens'] = array(
    '#title' => t('Available Tokens'),
    '#theme' => 'token_tree',
    '#token_types' => array('node'), // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
    '#global_types' => TRUE, // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
    '#click_insert' => TRUE, // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
  );
  // No more options, return the form.
  return $form;
}

/**
 * Validates settings form for asb_scheme_email_facilitator_action().
 * Verifies that a subject and message exist.
 */
function asb_scheme_email_facilitator_action_validate($form, $form_state) {
  if ($form_state['values']['subject'] == "" || $form_state['values']['message'] == "") {
    form_set_error(t('Please, provide a subject and message.'));
  }
}

/**
 * Submit handler for asb_scheme_email_facilitator_action.
 *
 * Returns an associative array of values which will be available in the
 * $context when an action is executed.
 */
function asb_scheme_email_facilitator_action_submit($form, $form_state) {
  return array(
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
  );
}

/**** END rules configuration ****/