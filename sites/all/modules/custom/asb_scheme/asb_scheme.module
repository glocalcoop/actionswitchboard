<?php

/**
 * Implements hook_form_alter
 */
function asb_scheme_form_alter(&$form, &$form_state, $form_id) {
  // Check if the form has steps and add progress markup.
  if($form_id == 'scheme_node_form' && arg(2) != 'edit') {
    $form['actions']['submit']['#submit'][] = 'asb_scheme_redirect_success';
  }
  if(!empty($form['#steps']) && arg(2) != 'edit') {
    // Add scheme title to the steps display
    // TODO: May want to add settings to include images
    // to the progress markup.
    $output = '<div id="step-wapper" style="display:block;height:16px;">';
    foreach($form['#steps'] as $step_name => $step) {
      if($form_state['storage']['step'] == $step_name) {
        // TODO: Remove inline styling.
        $output .= '<span class="step-progress-current" ';
        $output .= 'style="display:inline-block;background:red;width:16px;height:16px;';
        $output .= 'margin:0 .2em;border-radius:10px;">';
        $output .= '</span>';
      }else{
        $output .= '<span class="step-progress" ';
        $output .= 'style="display:inline-block;background:blue;width:16px;height:16px;';
        $output .= 'margin:0 .2em;border-radius:10px;">';
        $output .= '</span>';
      }
    }
  $output .= '</div>';
  $form['progress'] = array(
    '#markup' => $output,
    '#weight' => 150,
  );
    // Add scheme title to each step
  if(!empty($form_state['values']['title'])) {
    $title_out = '<h2 class="scheme-title">' .$form_state['values']['title'] .'</h2>';
    $form['temptitle'] = array(
      '#markup' => $title_out,
      '#weight' => -10,
    );
  }
  }
}

/**
 * Implements hook_form_submit
 */

function asb_scheme_redirect_success($form, &$form_state) {
  // Redirect to custom page solution
  $form_state['redirect'] = 'scheme-created/' .$form_state['nid'];
}

/**
 * Implements hook_block_info().
 *
 * Add a custom group statistics and attendees blocks.
 */
function asb_scheme_block_info() {
  $blocks['group_info'] = array(
    'info' => t('Scheme Leader'),
    'cache' => DRUPAL_NO_CACHE
    // DRUPAL_CACHE_PER_ROLE will be assumed if not set.
  );
  $blocks['node_links'] = array(
    'info' => t('Scheme content links'),
    'cache' => DRUPAL_NO_CACHE
    // DRUPAL_CACHE_PER_ROLE will be assumed if not set.
  );
  return $blocks;
}

/**
 * Implement hook_theme().
 */
function asb_scheme_theme() {
  $module_path = drupal_get_path('module', 'asb_scheme');

  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );

  return array(
    'asb_scheme_group_info' => $base + array(
      'render element' => 'element',
      'template' => 'asb-scheme-group-info',
    ),
    'asb_scheme_group_links' => $base + array(
      'render element' => 'element',
      'template' => 'og-extras-group-links',
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Add a custom group statistics and create content blocks.
 */
function asb_scheme_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'group_info':
      // The info block is visible to everyone, group member or not.
      $content = theme('asb_scheme_group_info');
      if (!empty($content)) {
        $block['subject'] = t('Scheme Leader');
        $block['content'] = $content;
        // $block['content'] = "Hi schemer!";
      }
      break;

    case 'node_links':
      // Links are visible to people with permissions.
      $content = theme('asb_scheme_group_links');
      if (!empty($content)) {
        $block['subject'] = t('Create content');
        $block['content'] = $content;
      }
      break;

  }
  return $block;
}

/**
 * Creates the scheme create content links.
 */
function asb_scheme_node_links() {
  $group = og_context();

  $types = array();
  foreach (node_type_get_types() as $type) {
    if (og_is_group_content_type('node', $type->type)) {
      $types[$type->type] = $type->type;
    }
  }

  $content = og_node_create_links($group['group_type'], $group['gid'], OG_AUDIENCE_FIELD, NULL, NULL);
  return drupal_render($content);
}

/**
 * Implements hook_node_view
 */
function asb_scheme_node_view($node, $view_mode, $langcode){
  switch ($node->type) {
    case 'issue':
      $node->content['links']['issue_reference_link'] = array(
        '#weight' => 100, // place it at the bottom
        '#markup' => '<div class="add-goal">' .l('Recommend a goal', 'node/add/goal', array('query' => array('field_issue_reference' => $node->nid))) .'</div>',
      );
    case 'scheme':
      drupal_add_css(drupal_get_path('module', 'asb_scheme') . '/css/progress.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
      drupal_add_library('jquery_plugin', 'cycle');
      drupal_add_js(drupal_get_path('module', 'asb_scheme') . '/js/asb-scheme.js', 'file');
      if (isset($node->field_progress['und'])) {
        $progress = $node->field_progress['und'][0]['value'];
        if( is_numeric($progress) && $progress > 0 && $progress <= 100 ) {
          $progress_string = strval(round($progress));
          $progress_decimal = asb_scheme_val_to_dec($progress);
          $style = "width: ".round($progress)."%; display: block";
        }
        $node->content['field_progress'][0]['#markup'] = '<div class="progress-bar" data-progress="' .$progress_decimal[1]; 
        $node->content['field_progress'][0]['#markup'] .= '"><div class="progress" style="width:'.$progress_decimal[0] .'%">&nbsp;</div></div>';
        $node->content['field_progress'][0]['#markup'] .= '<div class="scheme-major-ticks"><div class="scheme-minor-ticks"></div></div>';
        $node->content['field_progress'][0]['#markup'] .= '<!-- Progress bar code built in asb_scheme_node_view() -->';
      }
      if (isset($node->field_issues_goals['und'])) {
        $issues_goals = asb_scheme_format_issues_goals($node);
        /* Add markup for issues */
        $node->content['issues'] = array(
          '#weight' => -100,
          '#markup' => $issues_goals['issues'],
        );
        /* Add markup for goals */
        $node->content['goals'] = array(
          '#weight' => -99,
          '#markup' => $issues_goals['goals'],
        );
      }
      /* Here we unset images if a video exists. */
      /* if (isset($node->content['field_video'])) { */
      /*     unset($node->content['field_image']); */
      /* } */
      $node->content['format_created'] = array(
        '#weight' => -101,
        '#markup' => date('j/m/y', $node->created),
      );
      $node->content['group_group'][0]['#title'] = "Request Membership";
      break;
  }
}

/**
 * Format issues and goals for a scheme.
 */
function asb_scheme_format_issues_goals($node) {
  $output['issues'] = '';
  $output['goals'] = '';
  foreach ($node->field_issues_goals['und'] as $key => $value) {
    if ($value['entity']->type == 'issue') {
      $output['issues'] = $value['entity']->title;
    }elseif ($value['entity']->type == 'goal') {
      $output['goals'] .= '<li><a href="/node/"' .$value['target_id'] .'>'
        .$value['entity']->title .'</a></li>';
    }
  }
  return $output;
}

/**
 * Function to get needs contribute row counts
 * to show total Material and Skills needs
 *
 * TODO: Expand this to include funding needs
 * once we have a mechanism to measure that.
 */
function asb_scheme_get_view_rowcount(){
  $view = views_get_current_view();

  // Check view need_type and return markup for the template.
  if(!empty($view->need_type)) {
    if($view->need_type == 'funds') {
      $funds_raised = asb_scheme_funds_raised();
      return '<h1 class="funds-raised">$' .$funds_raised .'</h1>';
    }
    if($view->need_type == 'skill') {
      $text = "skills displayed.";
    }elseif($view->need_type == 'supplies') {
      $text = "supplies displayed.";
    }
    $page_total = count($view->result);
    if(isset($view->total_rows)){
      return '<h6 class="needs-count">' . $page_total . " of " . $view->total_rows ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    } else {
      return '<h6 class="needs-count">' . $page_total . " of " . $page_total ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    }
  }
}

/**
 * Add designation for skills v. supplies in
 * scheme_contribute view.  For populating
 * correct text to the view template for counts
 * of completed schemes.
 *
 * used by asb_scheme_get_view_rowcount
 */
function asb_scheme_views_pre_render(&$view) {
  if($view->name == 'scheme_contribute') {
    if($view->current_display == 'block') {
      $view->need_type = 'skill';
    }
    if($view->current_display == 'block_1') {
      $view->need_type = 'supplies';
    }
    if($view->current_display == 'block_2') {
      $view->need_type = 'funds';
    }
  }
}

/**
 * helper function to turn value into decimal string.
 */
function asb_scheme_val_to_dec($num) {
  $num = strval(round($num));
  $decimal = "." .$num;
  $num_var = [$num, $decimal];
  return $num_var;
}

/**
 * helper function to get the amount of funds
 * raised for the specific scheme.
 * TODO: Get actual funds raised.
 */
function asb_scheme_funds_raised() {
  $raised = rand(1, 1000);
  return $raised;
}