<?php

function asb_scheme_init() {
  ctools_include('ajax');
}

function asb_scheme_cron() {
  // asb_scheme_civicrm_api();
  _asb_scheme_update_skills();
}

/** 
 * Implements hook_comment_view_alter()
 */
function asb_scheme_comment_view_alter(&$build) {
  // dsm($build);
}

function asb_scheme_link_alter(&$links, $node) {
  // dsm($links);
  // dsm($node);
}

/**
* Implements hook_entity_info_alter().
*/
function asb_scheme_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['search_teaser'] = array(
    'label' => t('Search teaser'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_preprocess_node().
*/
function asb_scheme_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'search_teaser') {
    // dsm($vars);
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__search_teaser';
    $vars['leader'] = asb_scheme_get_scheme_leader($vars['nid']);
    $vars['leader_markup'] = '<div class="scheme-leader"><a href="/user/' .$vars['leader']['uid'] .'">';
    $vars['leader_markup'] .= $vars['leader']['name'] .'</a></div>';
    // Create markup for completed schemes.
    // unset($vars['content']['goals']);
    if(isset($vars['field_issues_goals'][0])) {
      $link_markup = l($vars['field_issues_goals'][0]['entity']->title,
                       'node/' .$vars['field_issues_goals'][0]['target_id'],
                       array('attributes' => array(
                           'class' => array('issue-link'),
                           'title' => $vars['field_issues_goals'][0]['entity']->title)));
      $vars['content']['issues']['#markup'] = $link_markup;
    }
    // dsm($vars);
    unset($vars['content']['field_issues_goals']);
    $vars['fans'] = '1005';
    $vars['people_count'] = '69';
  }
} 


function asb_scheme_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // dsm($data);
  // dsm($router_item);
  // dsm($root_path);
  // Add a tab linking to ajax loading tab on scheme pages
  if(isset($router_item['page_arguments'][0]->type)) {
  if($router_item['page_arguments'][0]->type == 'scheme') {
    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => t('Updates'),
        'href' => 'asb_scheme/nojs/scheme_content',
        'localized_options' => array(
          'attributes' => array(
            'title' => t('Show scheme updates'),
            'id' => 'asb-scheme-ajax-link',
          ),
        ),
      ),
    
      // Define whether this link is active. This can be omitted for
      // implementations that add links to pages outside of the current page
      // context.
      '#active' => ($router_item['path'] == $root_path),
    );
    $count = count($data['tabs'][0]['output']);
    $data['tabs'][0]['count'] == $count;
  }
  }
}

function asb_scheme_theme_registry_alter(&$theme_registry) {
  // dsm($theme_registry);
  if (isset($theme_registry['menu_local_task'])) {
    $theme_registry['menu_local_task']['function'] = 'theme_asb_scheme_local_task'; // The new theme function.
  }
} 

function theme_asb_scheme_local_task(&$variables) {
  // dsm($variables);
  // dsm("Hi dad");
 $link = $variables['element']['#link'];
  $link_text = $link['title'];

  if (!empty($variables['element']['#active'])) {
    // Add text to indicate active tab for non-visual users.
    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';

    // If the link does not contain HTML already, check_plain() it now.
    // After we set 'html'=TRUE the link will not be sanitized by l().
    if (empty($link['localized_options']['html'])) {
      $link['title'] = check_plain($link['title']);
    }
    $link['localized_options']['html'] = TRUE;
    $link_text = t('!local-task-title!active', array('!local-task-title' => $link['title'], '!active' => $active));
  }
  if(isset($link['localized_options']['attributes']['id']) && $link['localized_options']['attributes']['id'] == 'asb-scheme-ajax-link') {
    
    // return '<li' . (!empty($variables['element']['#active']) ? ' class="active ctools-use-ajax"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";   
    // Returns an ajax response tab containing the scheme updates view url
    return '<li' . (!empty($variables['element']['#active']) ? ' class="active ctools-use-ajax"' : '') . '>' .ctools_ajax_text_button( 'Updates', 'asb_scheme/nojs/scheme_content/page/' .arg(1), t('Get view content.')) . "</li><!-- Added in asb_scheme module line 61. -->\n";
  }else{ 
    return '<li' . (!empty($variables['element']['#active']) ? ' class="active"' : '') . '>' . l($link_text, $link['href'], $link['localized_options']) . "</li>\n";
  }
}

function asb_scheme_menu() {
  $items = array();
  $items['asb_scheme/%ctools_js/scheme_content/%/%'] = array(
    'title' => "Updates",
    'page callback' => 'asb_scheme_display_view',
    'page arguments' => array(1,2,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Renders a view via ajax
 * @param $view_name
 *  The view name to render
 * @param $display_name
 *  The display name of the view to render
 * @param $gid
 *  The organic group id supplied as argument to the view
 *  and used to render og specific modal dialog forms
 */
function asb_scheme_display_view($js = NULL, $view_name, $display_name, $gid) {
  global $user;
  // display view via ajax depending on $view_name and $display name
  $view = views_get_view($view_name);
  $view->set_display($display_name);
  $view->set_arguments(array($gid));
  // Node types we want modals for.
  $node_types = array('update','event','announcement');
  // Determine user_access for node creation
  // If they fail access check remove the node type
  // from the array.
  foreach($node_types as $key => $value) {
    if(!og_user_access('node', $gid, "create $value content")) {
      unset($node_types[$key]);
    }
  }
  if(!empty($node_types)) {
    $header = asb_modal_settings($gid, $node_types);
  }else{
    $header = '<p class="scheme-updates-header"><strong>Read about this scheme\'s activities.</strong></p>';
  }
  $options = array(
     'id' => 'area',
     'table' => 'views',
     'field' => 'area',
     'empty' => TRUE,
     'content' => $header,
     'format' => 'full_html',
     'tokenize' => 0,
   );
   $view->display_handler->set_option('header', array('text' => $options));
   // dsm($view->page);
   $view->execute();
   $output = $view->render();
   // dsm($output);
   if($js) {
     ctools_include('ajax');
     $commands = array();
     $commands[] = ajax_command_html('#scheme-content', $output);
     print ajax_render($commands);

   }else{
     return $output;
   }
}

/**
 * helper function to remove workflow fields in modal field edit forms.
 */
function _asb_scheme_manage_workflow($form, &$form_state) {
  $form['workflow']['#access'] = FALSE;
  return $form;
}

/**
 * Implements hook_media_browser_plugins_alter().
 */
function asb_scheme_media_browser_plugins_alter(&$plugins) {
  global $user;
  $dest = current_path();
  $path = explode('/', $_SERVER['HTTP_REFERER']);
  $des = drupal_get_destination();
  if(strpos($des['destination'], 'types[video]') !== false) {
    unset($plugins['library']);
    unset($plugins['upload']);
  }
}

/**
 * Implements hook_form_comment_form_alter()
 */
function asb_scheme_form_comment_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#value'] = t('Submit');
}

/**
 * Implements hook_form_alter
 */
function asb_scheme_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  if($form_id == 'user_login') {
    $form['html_markup'] = array('#markup' => t('<div class="reset-pass"><a class="reset-pass-link" href="/user/password">Forgot your password?</a></div><!-- Added in asb_scheme.module -->'));
  }
  // Make modifications to scheme_overview_filtered view
  // Set label as display value for all selections.
  if(isset($form_state['view']->filter['status']->view->name) && $form_state['view']->filter['status']->view->name == 'scheme_overview_filtered') {
    // dsm($form_state['view']->filter['field_issues_goals_target_id']);
    // dsm($form);
    // $form['field_issues_goals_target_id']['#options']['All'] = "Issues";
    if($form_id == 'views_exposed_form') {
      if(isset($form['created'])) {
        $form['created']['#theme'] = 'select_as_links';
      }
      $keys = array_keys($form);
      foreach($keys as $key => $value) {
        if(strpos($value,'field') !== FALSE && $form[$value]['#type'] == 'select' && !isset($form[$value]['#theme'])) {
          if($form['#info']['filter-' .$value]['label'] != "Issue") {
            $form[$value]['#options']['All'] = $form['#info']['filter-' .$value]['label'];
          }else{
            unset($form[$value]['#options']['All']);
          }
        }
        if(isset($form[$value]['#theme'])) {
          if(isset($form[$value]['#options'][0]) && $form[$value]['#options'][0] == "Is not from the movie") {
            unset($form[$value]['#options'][0]);
          }
        }
      }
      if(isset($form['secondary'])) {
        foreach($form['secondary'] as $key => $value) {
          if(is_array($value)) {
            $form['secondary'][$key]['#options']['All'] = $form['secondary'][$key]['#title'];
          }
        }
      }
    }
  }
  // Modifies the view filter on the scheme search view to explicitly
  // set the issues connected to the scheme.
  if (isset($form_state['view']->filter['field_issues_goals_target_id'])) {

    $issues = asb_scheme_get_issues();
    $issue_list = array();
    // dsm($form_state['view']->filter['field_issues_goals_target_id']);
    foreach($issues as $key => $issue) {
      $issue_list[] = array(
        'title' => t($issue->title),
        'operator' => "=",
        'value' => array(
          'value' => $issue->nid,
          'min' => '',
          'max' => '',
        )
      );
      $form['field_issues_goals_target_id']['#options'][] = t($issue->title);
    }
    // unset($form_state['view']->display_handler->handlers['filter']['field_issues_goals_target_id']->options['group_info']['group_items']);
    // dsm($issue_list);
    foreach($issue_list as $key => $issue) {
      // dsm($issue);
      $form_state['view']->display_handler->handlers['filter']['field_issues_goals_target_id']->options['group_info']['group_items'][] = $issue;
    }
  }
  if (isset($form_state['view']->filter['field_material_needs_value'])) {
    $mneeds = asb_scheme_format_needs_view_array();
    // unset($form['field_material_needs_value']['#options']);
    foreach($mneeds as $key => $value) {
      $form['field_material_needs_value']['#options'][] = t($value['title']);
    }
    unset($form_state['view']->display_handler->handlers['filter']['field_material_needs_value']->options['group_info']['group_items']);
    $form_state['view']->display_handler->handlers['filter']['field_material_needs_value']->options['group_info']['group_items'] = $mneeds;
    // dsm($form_state['view']);
    // dsm($form_state['view']->display_handler->handlers['filter']['field_material_needs_value']->options['group_info']['group_items']);
  }
  if($form_id == 'scheme_node_form') {
    // Here we create an ajax callback that will limit
    // the taxonomy term selections available based
    // on which entity is selected in field_issues_goals
    $form['field_issues_goals']['und']['#ajax'] = array(
      'event' => 'click',
      'wrapper' => 'parent-goal-wrapper',
      'callback' => 'asb_scheme_goals_ajax_callback',
      'method' => 'replace',
    );
    // Add a wrapper for the correct field to change
    $form['field_scheme_goals_taxonomy']['und']['#prefix'] = '<div id="parent-goal-wrapper">';
    $form['field_scheme_goals_taxonomy']['und']['#suffix'] = '</div>';
  }
  $pos = strpos($form['#action'], 'mfe-single-modal-callback');
  // Modify field modal edit form
  if($form_id == 'scheme_node_form' && $pos !== false) {
    // Remove preview and delete buttons
    $form['actions']['preview']['#access'] = false;
    $form['actions']['delete']['#access'] = false;
    // Remove workflow block on modals
    $form['#after_build'][] = '_asb_scheme_manage_workflow';
  }
  // Add redirect on scheme creation
  if($form_id == 'scheme_node_form' && arg(2) != 'edit' && $pos === false) {
    $form['actions']['submit']['#submit'][] = 'asb_scheme_redirect_success';
  }else{
    // drupal_add_js(drupal_get_path('module', 'asb_scheme') . '/js/scheme-issues.js', 'file');
  }
  // Check if the form has steps and add progress markup.
  if(!empty($form['#steps']) && arg(2) != 'edit' && $pos === false) {
    // Add scheme title to the steps display
    // TODO: May want to add settings to include images
    // to the progress markup.
    // add it after forms.css
    drupal_add_css( drupal_get_path('module', 'asb_scheme') . '/css/scheme_add_edit.css', array('group' => CSS_THEME, 'type' => 'file', 'weight'=>2 ));

    $output = '<div id="stepper-add-scheme"><ul>';
    // oldschool
    $i = 1;
    foreach($form['#steps'] as $step_name => $step) {
      if( $form_state['storage']['step'] == $step_name) {
        $output .= '<li class="current '. $step_name . '">' . $i . '<span>' . $step_name . '</span></li>';
      }else{
        $output .= '<li class="'. $step_name . '">' . $i . '<span>' . $step_name . '</span></li>';
      }
      $i ++;
    }
    $output .= '</ul></div>';
    $form['progress'] = array(
      '#markup' => $output,
      '#weight' => 150,
    );
    // Add scheme title to each step
    if(!empty($form_state['values']['title'])) {
      $title_out = '<h2 class="scheme-title">' .$form_state['values']['title'] .'</h2>';
      $form['temptitle'] = array(
        '#markup' => $title_out,
        '#weight' => -10,
      );
    }
  }
  // Here we do some modifications of the entity reference fields
  // to keep a consistent hierarchy displayed to the user.
  if($form_id == 'goal_node_form') {
    $form['field_hidden_issue_reference']['#access'] = FALSE;
    if(isset($form['field_hidden_issue_reference']['und']['#default_value'][0])) {
      $issue_ref = $form['field_hidden_issue_reference']['und']['#default_value'][0];
      $form['field_issue_reference']['und']['#default_value'][0] = $issue_ref;
      // $exclude = array($form['nid']['#value']);
      $exclude = $form['field_child_goals']['und']['#default_value'];
      $current = $form['nid']['#value'];
      $form['field_parent_goal']['und']['#options'] = asb_scheme_get_goal_keys($current, $issue_ref, $exclude);
    }
    // This hides the parent_goal field if there is no
    // issue selected.
    $form['field_parent_goal']['#states'] = array(
      'invisible' => array(
        ':input[name="field_issue_reference[und]"]' => array('value' => '_none'),
        // ':input[name="field_issue_reference[und][]"]' => array('value' => '_none'),
        // ':input[name="field_parent_goal[und]"]' => array('value' => '_none'),
      ),
    );

    // Add an ajax callback that changes the values available
    // in the parent_goals reference based on which issue is selected.
    $form['field_issue_reference']['und']['#ajax'] = array(
      'event' => 'change',
      'wrapper' => 'parent-goal-wrapper',
      'callback' => 'asb_scheme_goals_ajax_callback',
      'method' => 'replace',
    );
    foreach($form['field_child_goals']['und']['#default_value'] as $k => $v) {
      unset($form['field_parent_goal']['und']['#options'][$v]);
    }
    if(isset($form['field_parent_goal']['und']['#options'][$form['nid']['#value']])) {
      unset($form['field_parent_goal']['und']['#options'][$form['nid']['#value']]);
    }
    $form['field_parent_goal']['und']['#prefix'] = '<div id="parent-goal-wrapper">';
    $form['field_parent_goal']['und']['#suffix'] = '</div>';

    $form['#validate'][] = 'asb_scheme_goal_form_validate';
    $form['actions']['submit']['#submit'][] = 'asb_scheme_goal_form_submit';
    // dsm($form);
    // Here we hide child goals to all but administrators
    // as this field is mostly here for validation and consistency.
    if(!isset($user->roles[3])) {
      unset($form['field_child_goals']);
      if(!empty($form['nid']['#value'])) {
        if(empty($form['field_parent_goal']['und']['#default_value'][0])) {
          $form['field_parent_goal']['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Custom submit handler for goals.
 *
 * This submit handler adds the goal to the goal field
 * of the issue, if the goal is a top level goal.
 *
 * TODO: check for the reverse situation (if the goal is being
 * changed to be a sub-goal, it should remove it's reference to
 * the issue.
 *
 */
function asb_scheme_goal_form_submit(&$form, &$form_state) {
  if(empty($form_state['values']['field_parent_goal']['und'][0]['target_id']) && isset($form_state['issue_ref'])) {
    $node = node_load($form_state['issue_ref']['target_id']);
    $node->field_goals['und'][] = array('target_id' => $form_state['nid']);
    node_save($node);
  }else{
    $node = node_load($form_state['issue_ref']['target_id']);
    $node =_asb_scheme_goal_clean_refs($form_state, $node, 1);
    node_save($node);
  }
}

/**
 * Check goal references and make sure there are
 * no duplicates and that the current node belongs.
 */
function _asb_scheme_goal_clean_refs(&$form_state, $node, $remove = 0) {
  $targets = array();
  foreach($node->field_goals['und'] as $key => $value) {
    $targets[] = $value['target_id'];
  }
  $targets = array_unique($targets);
  if($remove == 1) {
    foreach($targets as $key => $value) {
      if($value == $form_state['nid']) {
        unset($targets[$key]);
      }
    }
  }
  unset($node->field_goals['und']);
  foreach($targets as $key => $value) {
    $node->field_goals['und'][] = array('target_id' => $value);
  }
  $node->field_goals['und'] = array_values($node->field_goals['und']);
  return $node;
}

/**
 * helper function for filtering arrays.
 */
// function _asb_scheme_f

/** 
 *
 * Add ajax callback for parent goals truncation.
 * The callback changes the parent goal list so that
 * only goals that are connected to the issue appear
 * to the user.
 */
function asb_scheme_goals_ajax_callback(&$form, &$form_state) {
  $allowed_goals = asb_scheme_get_allowed_terms($form['field_issues_goals']['und']['#value']);
  // Build the full list of options
  $field_goals = asb_scheme_taxonomy_options('goals');
  // $field_goals = $form['field_scheme_goals_taxonomy']['und']['#options'];
  foreach($field_goals as $key => $value) {
    if($key != '_none' && !in_array($key, $allowed_goals)) {
      unset($field_goals[$key]);
      unset($form['field_scheme_goals_taxonomy']['und']['#options'][$key]);
    }
  }
  // $form['field_scheme_goals_taxonomy']['und']['#options'] = $form['field_scheme_goals_taxonomy']['und']['#options'];
  if(isset($form['field_scheme_goals_taxonomy']['und']['#options'])) {
    $form['field_scheme_goals_taxonomy']['und']['#options'] += $field_goals;
    return $form['field_scheme_goals_taxonomy'];
  }
}

/**
 * Returns a array for use with #options in a form field
 **/
function asb_scheme_taxonomy_options($machine_name) {
  $vocab = taxonomy_vocabulary_machine_name_load($machine_name);
  $tree = taxonomy_get_tree($vocab->vid);
  foreach ($tree as $item) {
    $options[$item->tid] = str_repeat('-', $item->depth) . $item->name;
  }
  return $options;
}

/**
 * Get allowed goal taxonomy terms for a specific nid
 */
function asb_scheme_get_allowed_terms($nid) {
  $value = $nid;
  $node = node_load($value);
  // dsm($node);
  $field_ref_type = field_info_instances('node',$node->type);
  foreach($field_ref_type as $field_name => $field_value) {
    if($field_value['widget']['type'] == 'taxonomy_shs') {
      $field = field_get_items('node', $node, $field_name);
      // dsm($field);
    }
  }
  $top_parents = array();
  if(!empty($field)) {
    $all_terms = array();
    foreach($field as $key => $term) {
      $top_parent_term = null;
      $parent_terms = taxonomy_get_parents_all($term['tid']);
      foreach($parent_terms as $parent) {
        $parent_parents = taxonomy_get_parents_all($parent->tid);
        $all_terms[] = $parent->tid;
        if(count($parent_parents) == 1) {
          $top_parents[] = $parent->tid;
        }
      }
    }
  }else{
    $all_terms = array();
  }
  // dsm($top_parents);
  // return $top_parents;
  return $all_terms;
}
/**
 * Gets keyed output for goals 
 *
 * @params $current_nid, $issue $exclude
 *
 * @returns keyed array('nid' => 'title')
 */
function asb_scheme_get_goal_keys($current_nid, $issue, $exclude = array()) {
  // query the database against the selected issue
  // returns all goals connected to the issue
  $sql = "SELECT entity_id AS eid, field_child_goals_target_id as ctid 
          FROM {field_data_field_child_goals} where field_child_goals_target_id IN (
           SELECT entity_id 
             FROM {field_data_field_parent_goal}
               WHERE field_parent_goal_target_id 
                 IN (SELECT entity_id 
                       FROM {field_data_field_hidden_issue_reference}
                         WHERE field_hidden_issue_reference_target_id = $issue)) 
                     OR field_data_field_child_goals.entity_id 
                       IN (SELECT entity_id 
                             FROM {field_data_field_parent_goal} 
                               WHERE field_parent_goal_target_id 
                                 IN (SELECT entity_id 
                                       FROM {field_data_field_hidden_issue_reference} 
                                         WHERE field_hidden_issue_reference_target_id = $issue))";

    $result = db_query($sql)->fetchAll();
    if(empty($result)) {
      $sql = "SELECT field_data_field_hidden_issue_reference.entity_id 
                AS eid, field_child_goals_target_id
                AS ctid FROM {field_data_field_hidden_issue_reference}
                LEFT JOIN {field_data_field_child_goals}
                  ON field_data_field_hidden_issue_reference.entity_id = field_data_field_child_goals.field_child_goals_target_id
                  WHERE field_data_field_hidden_issue_reference.field_hidden_issue_reference_target_id = $issue";
        // $sql = "SELECT entity_id as eid from field_data_field_hidden_issue_reference";
      $result = db_query($sql)->fetchAll();
    }
    $options = array();
    $keys = array();
    // Build an array of keys to populate the select list
    foreach($result as $row) {
      if(!isset($options[$row->eid])) {
        $options[$row->eid] = array($row->ctid);
        if($row->eid != $current_nid) {
          $keys[] = $row->eid;
        }
        if($row->ctid != $current_nid) {
          $keys[] = $row->ctid;
        }
      }else{
        $options[$row->eid][] = $row->ctid;
        if($row->eid != $current_nid && $row->ctid != $current_nid) {
          $keys[] = $row->eid;
          $keys[] = $row->ctid;
        }
      }
      if($row->ctid === NULL) {
        $keys[] = $row->eid;
      }
    }
    $keys = array_unique($keys);
    foreach($exclude as $k => $v) {
      if(($key = array_search($v, $keys)) !== false) {
        unset($keys[$key]);
      }
      unset($keys[$v]);
    }
    $opts = asb_scheme_build_goals($keys);
    return $opts;
}

/**
 * Function to add titles to nids of nodes.
 *
 * @returns
 * array of nids and titles array('nid' => 'title')
 */
function asb_scheme_build_goals($options) {
  $nid_list = array('_none' => '- None -');
  foreach($options as $key => $value) {
    if(!empty($value)) {
      $sql = "SELECT title FROM {node} WHERE nid = $value";
      $result = db_query($sql)->fetchObject();
      foreach($result as $row) {
        $nid_list[$value] = $row;
      }
    }
  }
  return $nid_list;
}

/**
 * validation for goal_node_form
 * 
 * This validation step does the following.
 * 0. Stores the issue reference in $form_state['issue_ref']
 * 1. Adds this issue reference to the hidden_issue_reference field.
 * 2. Unsets issue_reference field for hierarchical display.
 *
 */
function asb_scheme_goal_form_validate(&$form, &$form_state) {
  if(empty($form_state['values']['field_parent_goal']['und'][0]['target_id'])) {
    $form_state['issue_ref'] = $form_state['values']['field_issue_reference']['und'][0];
    $form_state['values']['field_hidden_issue_reference']['und'][0] = $form_state['issue_ref'];
  }else{
    $form_state['issue_ref'] = $form_state['values']['field_issue_reference']['und'][0];
    $form_state['values']['field_hidden_issue_reference']['und'][0] = $form_state['issue_ref'];
    unset($form_state['values']['field_issue_reference']['und'][0]);
  }
}

/**
 * Create a material needs list for the view handler
 *
 * Returns a database object containing material need names 'mneed'
 */
function asb_scheme_build_material_needs() {
  $sql = "SELECT DISTINCT field_material_needs_value AS mneed
            FROM {field_data_field_material_needs} ORDER BY mneed";
  $result = db_query($sql)->fetchAll();
  return $result;
}

function asb_scheme_format_needs_view_array() {
  $group_items = array();
  $needs = asb_scheme_build_material_needs();
  foreach($needs as $need) {
    $group_items[] = array(
      'title' => $need->mneed,
      'operator' => 'contains',
      'value' => $need->mneed,
    );
  }
  return $group_items;
}
  
/**
 * Get all issues and return a database object
 */
function asb_scheme_get_issues() {
  $sql = "SELECT nid, title FROM {node} WHERE type = 'issue' ORDER BY title";
  $result = db_query($sql);
  $results = $result->fetchAll();
  return $results;
}
    
/**
 * Implements hook_form_submit
 */

function asb_scheme_redirect_success($form, &$form_state) {
  // Redirect to custom page solution
  $form_state['redirect'] = 'scheme-created/' .$form_state['nid'];
}

/**
 * Implements hook_block_info().
 *
 * Add a custom group statistics and attendees blocks.
 */
function asb_scheme_block_info() {
  $blocks['group_info'] = array(
    'info' => t('Scheme Leader'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['node_links'] = array(
    'info' => t('Scheme content links'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['user_message'] = array(
    'info' => t('User Custom Login'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implement hook_theme().
 */
function asb_scheme_theme() {
  $module_path = drupal_get_path('module', 'asb_scheme');

  $base = array(
    'file' => 'theme.inc',
    'path' => "$module_path/theme",
  );
  return array(
    'asb_scheme_group_info' => $base + array(
      'render element' => 'element',
      'template' => 'asb-scheme-group-info',
    ),
    'asb_scheme_group_links' => $base + array(
      'render element' => 'element',
      'template' => 'og-extras-group-links',
    ),
    'asb_scheme_user_message' => $base + array(
      'render_eleement' => 'element',
      'template' => 'asb-scheme-user-message',
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Add a custom group statistics and create content blocks.
 */
function asb_scheme_block_view($delta = '') {
  global $user;
  $block = array();
  
  switch ($delta) {
    case 'group_info':
      // The info block is visible to everyone, group member or not.
      $content = theme('asb_scheme_group_info');
      if (!empty($content)) {
        $block['subject'] = t('Scheme Leader');
        $block['content'] = $content;
        // $block['content'] = "Hi schemer!";
      }
      break;

    case 'node_links':
      // Links are visible to people with permissions.
      $content = theme('asb_scheme_group_links');
      if (!empty($content)) {
        $block['subject'] = t('Create content');
        $block['content'] = $content;
      }
      break;
      
    case 'user_message':
      // Show user Hello and login
      $content = theme('asb_scheme_user_message', array('messages' => privatemsg_unread_count($user)));
      if (!empty($content)) {
        $block['content'] = $content;
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_context_plugins()
 */
function asb_scheme_context_plugins() {
  $plugins = array();
  $plugins['asb_scheme_context_condition_author'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'asb_scheme') .'/plugins',
      'file' => 'asb_scheme_context_condition_author.inc',
      'class' => 'asb_scheme_context_condition_author',
      'parent' => 'context_condition',
    ),
  );
  // dsm($plugins);
  return $plugins;
}

/**
 * Implements hook_context_registry() 
 */
function asb_scheme_context_registry() {
  $plugin =  array(
    'conditions' => array(
      'author' => array(
        'title' => t('Content Author'),
        'plugin' => 'asb_scheme_context_condition_author',
      ),
    ),
  );
  // dsm($plugin);
  return $plugin;
}

/**
 * Creates the scheme create content links.
 */
function asb_scheme_node_links() {
  $group = og_context();

  $types = array();
  foreach (node_type_get_types() as $type) {
    if (og_is_group_content_type('node', $type->type)) {
      $types[$type->type] = $type->type;
    }
  }

  $content = og_node_create_links($group['group_type'], $group['gid'], OG_AUDIENCE_FIELD, NULL, NULL);
  return drupal_render($content);
}

/**
 * Implements hook_node_view
 */
function asb_scheme_node_view($node, $view_mode, $langcode){
  if($view_mode == 'full') {
    if($plugin = context_get_plugin('condition', 'author')) {
      $plugin->execute($node);
    }
  }
  switch ($node->type) {
    case 'issue':
      $node->content['links']['issue_reference_link'] = array(
        '#weight' => 100, // place it at the bottom
        '#markup' => '<div class="add-goal">' .l('Recommend a goal', 'node/add/goal', array('query' => array('field_issue_reference' => $node->nid))) .'</div>',
      );
    case 'scheme':
      // Move image field above progress if no video exists.
      if(isset($node->field_video) && isset($node->field_image)) {
        if(count($node->field_video) == 0 && count($node->field_image) > 0) {
          $node->content['field_image']['#weight'] = 2;
        }
      }
      // Make changes to scheme node views add markup to content variable.
      drupal_add_css(drupal_get_path('module', 'asb_scheme') . '/css/progress.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
     drupal_add_css(drupal_get_path('module', 'asb_scheme') . '/css/slideshow.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
       drupal_add_library('jquery_plugin', 'cycle');
      drupal_add_js(drupal_get_path('module', 'asb_scheme') . '/js/asb-scheme.js', 'file');
      // Create progress bar markup
      if (isset($node->field_progress['und'][0])) {
        $progress = $node->field_progress['und'][0]['value'];
        if( is_numeric($progress) && $progress > 0 && $progress <= 100 ) {
          $progress_string = strval(round($progress));
          $progress_decimal = asb_scheme_val_to_dec($progress);
          $style = "width: ".round($progress)."%; display: block";
          $node->content['field_progress'][0]['#markup'] = '<div class="progress-bar" data-progress="' .$progress_decimal[1]; 
          $node->content['field_progress'][0]['#markup'] .= '"><div class="progress" style="width:'.$progress_decimal[0] .'%">&nbsp;</div></div>';
          $node->content['field_progress'][0]['#markup'] .= '<div class="scheme-major-ticks"><div class="scheme-minor-ticks"></div></div>';
          $node->content['field_progress'][0]['#markup'] .= '<!-- Progress bar code built in asb_scheme_node_view() -->';
        }else{
          unset($node->content['field_progress']);
        }
        
      }
      // Create issues/goals markup
      if (isset($node->field_issues_goals['und'])) {
        // dsm($node);
        $issues_goals = asb_scheme_format_issues_goals($node);
        /* Add markup for issues */
        $node->content['issues'] = array(
          '#weight' => -100,
          '#markup' => $issues_goals['issues'],
        );
        /* Add markup for goals */
        $node->content['goals'] = array(
          '#weight' => -99,
          '#markup' => $issues_goals['goals'],
        );
      }
      /* Here we unset images if a video exists. */
      /* if (isset($node->content['field_video'])) { */
      /*     unset($node->content['field_image']); */
      /* } */
      $node->content['format_created'] = array(
        '#weight' => -101,
        '#markup' => date('j/m/y', $node->created),
      );
      global $user;
      // Here we change the text for membership based on the user's
      // membership status.
      $membership = og_get_membership('node', $node->nid, 'user', $user->uid);
      if(!empty($membership)) {
        if($membership->state == 2) {
          $node->content['group_group'][0]['#title'] = "Membership Pending";
        }elseif($membership->state == 1) {
          $node->content['group_group'][0]['#title'] = "Leave Scheme";
        }
      }else{
        $node->content['group_group'][0]['#title'] = "Request Membership";
      }
      if ($view_mode == 'search_teaser') {
        // Here we modify values for the search teaser view mode
        $node->content['field_leader'] = array();
        $leader = asb_scheme_get_scheme_leader($node->nid);
        $node->content['field_leader'][0]['#markup'] = '<div class="scheme-leader"><a href="/user/' .$leader['uid'] .'">';
        $node->content['field_leader'][0]['#markup'] .= $leader['name'] .'</a></div><!-- Added in asb_scheme_node_view -->';
        // set field_people_skills as count
        $people_needs_count = isset($node->field_people_skills['und']) ? count($node->field_people_skills['und']) : 0;
        unset($node->content['field_people_skills']);
        $node->content['field_people_skills'][0]['#markup'] = $people_needs_count;
        // set field_material_needs as count
        if(isset($node->field_material_needs['und'])) {
          $material_needs_count = count($node->field_material_needs['und']);
        }else{
          $material_needs_count = 0;
        }
        unset($node->content['field_material_needs']);
        $node->content['field_material_needs'][0]['#markup'] = $material_needs_count;
        $funding_needs_count = asb_scheme_funds_raised();
        unset($node->content['field_funding_needs']);
        $node->content['field_funding_needs'][0]['#markup'] = $funding_needs_count;
      }
      // dsm($node);

      break;
  }
}

/**
 * Format issues and goals for a scheme.
 */
function asb_scheme_format_issues_goals($node) {
  $output['issues'] = '';
  $output['goals'] = '';
  foreach ($node->field_issues_goals['und'] as $key => $value) {
    if(isset($value['entity'])) {
      if ($value['entity']->type == 'issue') {
        $output['issues'] = '<a href="/node/' .$value['target_id'] .'">' .$value['entity']->title .'</a>';
        $output['issues'] .= '<!-- Link added in asb_scheme_format_issues_goals -->';
      }elseif ($value['entity']->type == 'goal') {
        $output['goals'] .= '<li><a href="/node/' .$value['target_id'] .'">'
          .$value['entity']->title .'</a></li>';
      }
    }
  }
  return $output;
}

/**
 * Function to get needs contribute row counts
 * to show total Material and Skills needs
 *
 * TODO: Expand this to include funding needs
 * once we have a mechanism to measure that.
 */
function asb_scheme_get_view_rowcount(){
  $view = views_get_current_view();

  // Check view need_type and return markup for the template.
  if(!empty($view->need_type)) {
    if($view->need_type == 'funds') {
      $funds_raised = asb_scheme_funds_raised();
      return '<h1 class="funds-raised">$' .$funds_raised .'</h1>';
    }
    if($view->need_type == 'skill') {
      $text = "skills displayed.";
    }elseif($view->need_type == 'supplies') {
      $text = "supplies displayed.";
    }
    $page_total = count($view->result);
    if(isset($view->total_rows)){
      return '<h6 class="needs-count">' . $page_total . " of " . $view->total_rows ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    } else {
      return '<h6 class="needs-count">' . $page_total . " of " . $page_total ." " .$text ."</h6><!-- printed by asb_scheme module -->";
    }
  }
}

/**
 * Add designation for skills v. supplies in
 * scheme_contribute view.  For populating
 * correct text to the view template for counts
 * of completed schemes.
 *
 * used by asb_scheme_get_view_rowcount
 */
function asb_scheme_views_pre_render(&$view) {
  global $user;
  if($view->name == 'scheme_contribute') {
    if($view->current_display == 'block') {
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $account = clone $user;
        if (node_access("update", $node, $account) === TRUE) {
          $modal_markup = '<div class="modal-edit"><a class="ctools-use-modal ctools-modal-mfe-modal" href="/mfe-single-modal-callback/nojs/!1/scheme/field_people_skills">Edit</a></div>';
          $view->header['area']->options['content'] = $modal_markup .$view->header['area']->options['content'];
        }
      }
    $view->need_type = 'skill';
    }
    if($view->current_display == 'block_1') {
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $account = clone $user;
        if (node_access("update", $node, $account) === TRUE) {
          $modal_markup = '<div class="modal-edit"><a class="ctools-use-modal ctools-modal-mfe-modal" href="/mfe-single-modal-callback/nojs/!1/scheme/field_material_needs">Edit</a></div>';
          $view->header['area']->options['content'] = $modal_markup .$view->header['area']->options['content'];
        }
      }
      $view->need_type = 'supplies';
    }
    if($view->current_display == 'block_2') {
      if(arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        $account = clone $user;
        if (node_access("update", $node, $account) === TRUE) {
          $modal_markup = '<div class="modal-edit"><a class="ctools-use-modal ctools-modal-mfe-modal" href="/mfe-single-modal-callback/nojs/!1/scheme/field_funding_needs">Edit</a></div>';
          $view->header['area']->options['content'] = $modal_markup .$view->header['area']->options['content'];
        }
      }
      $view->need_type = 'funds';
    }
  }
}

function asb_scheme_views_post_render(&$view, &$output, &$cache) {
  if($view->name == 'scheme_contribute') {
    $gid = og_context('node');
    if(isset($gid['gid'])){
      $node = node_load($gid['gid']);
      $user = user_load($node->uid);
      $link_markup = '<div class="donate-button"><a href="/';
      if($view->current_display == 'block') {
        $contact = privatemsg_get_link($user);
        $link_markup .= $contact .'?skills=1&gid=' .$gid['gid'] .'">Donate Skills</a></div>';
        $output = strtr($output, array('<!--skills-MESSAGE-->' => $link_markup));
      }elseif($view->current_display == 'block_1') {
        $contact = privatemsg_get_link($user);
        $link_markup .= $contact .'?supplies=1&gid=' .$gid['gid'] .'">Donate Supplies</a></div>';
        $output = strtr($output, array('<!--supplies-MESSAGE-->' => $link_markup));
      }
    }
  }
}

/**
 * helper function to turn value into decimal string.
 */
function asb_scheme_val_to_dec($num) {
  $num_var = array();
  $num = strval(round($num));
  $decimal = "." .$num;
  $num_var[] = $num;
  $num_var[] = $decimal;
  return $num_var;
}

/**
 * helper function to get the amount of funds
 * raised for the specific scheme.
 * TODO: Get actual funds raised.
 */
function asb_scheme_funds_raised() {
  $raised = rand(1, 1000);
  return $raised;
}

/**
 * Get scheme owner(s)
 */
function asb_scheme_get_scheme_leader($gid) {
  $sql = "SELECT u.uid, name FROM users u 
              INNER JOIN og_membership ogm ON u.uid = ogm.etid 
              INNER JOIN og_users_roles our ON ogm.etid = our.uid 
              WHERE ogm.gid = '$gid'
              AND ogm.entity_type = 'user' 
              AND our.rid = 3 AND our.gid = '$gid'";

  $user_list = db_query($sql)->fetchAll();
  $scheme_owner = array('name' => $user_list[0]->name, 
                          'uid' => $user_list[0]->uid);
  return $scheme_owner;
}

/**
 * Implements hook_msnf_info_steps_alter()
 * 
 * Remove steps on edit form.
 */
function asb_scheme_msnf_info_steps_alter(&$steps_cached, $entity_type, $bundle, $form) {
  if ($entity_type == 'node' && $bundle == 'scheme' && !empty($form['node']->nid)) {
    unset($steps_cached['node']['scheme']);
    return $steps_cached;
  }
}

/**** BEGIN rules configuration ****/
/**
 * Implements hook_action_info()
 *
 * Including rules here because for some reason
 * rules was not picking up the rules.inc file
 *
 */
function asb_scheme_action_info() {
  return array(
    'asb_scheme_email_facilitator_action' => array(
      'type' => 'system',
      'label' => t('Email Facilitator on scheme creation'),
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'asb_scheme_remind_facilitator_action' => array(
      'type' => 'system',
      'label' => t('Email reminder to facilitator'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}


/**
 * Sends email to facilitator on scheme creation
 */
function asb_scheme_email_facilitator_action($node, $context) {
  $result = db_query('SELECT DISTINCT u.mail FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = 6');
  // Now, actually send the mails.
  $params = array(
    'subject' => $context['subject'],
    'message' => $context['message'],
  );

  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $key = 'alert';
  $message = array('result' => TRUE);
  foreach ($result as $row) {
    $message = drupal_mail('asb_scheme', $key, $row->mail, language_default(), $params, $from);
    watchdog('action', 'Sent facilitator email to %email', array('%email' => $row->mail));
    if (!$message['result']) {
      break;
    }
  }
  // dsm($message['result']);
}

/**
 * Notifies facilitators of unchanged schemes.
 */
function asb_scheme_remind_facilitator_action(&$entity, $context = array()) {
  global $base_url;
  if(date("D h",time()) == "Mon 08") {
    $sql = "SELECT node.title, workflow_node.nid, field_facilitator_target_id AS fftid, users.mail 
          FROM {workflow_node} 
          LEFT JOIN {node} 
          ON node.nid = workflow_node.nid 
          JOIN {field_revision_field_facilitator}
          ON field_revision_field_facilitator.entity_id = node.nid 
          JOIN {users} 
          ON users.uid = field_facilitator_target_id 
          WHERE stamp < (UNIX_TIMESTAMP() - 604800) 
          AND sid = 2";
    $result = db_query($sql);
    //dsm($result);
    $facs = array();
    foreach($result as $row) {
      $scheme = '<a href="' .$base_url .'/node/' .$row->nid .'">' .$row->title .'</a>';
      $facs[$row->mail]['uid'] = $row->fftid;
      if(isset($facs[$row->mail]['scheme_link'])) {
        $facs[$row->mail]['scheme_link'] .= $scheme ."\n";
      }else{
        $facs[$row->mail]['scheme_link'] = $scheme ."\n";
      }
    }

    // Create message text for each facilitator
    foreach($facs as $key => $value) {
      $facs[$key]['message'] = "Hi ASB Facilitator,\n\nThese schemes seem neglected, could you check?\n\n";
      $facs[$key]['message'] .= $facs[$key]['scheme_link'];
      $facs[$key]['message'] .= "\n\nYour Action Switchboard Auto-bot!";

      // Now, actually send the mails.
      $params = array(
        'subject' => 'Schemers need you!',
        'message' => $facs[$key]['message'],
      );
      $from = variable_get('site_mail', ini_get('sendmail_from'));
      $mail_key = 'reminder';
      $message = array('result' => TRUE);
      $message = drupal_mail('asb_scheme', $mail_key, $key, language_default(), $params, $from);
      watchdog('action', 'Sent facilitator reminder to %email', array('%email' => $key));
      if (!$message['result']) {
        break;
      }
    }
  }
}


/**
 * Generates settings form for asb_scheme_email_facilitator().
 *
 * @param $context
 *   An array of options of this action (in case it is being edited)
 *
 * @return array $form
 *
 * @see asb_scheme_action_info()
 */
function asb_scheme_email_facilitator_action_form($context) {
  /*
  * We return a configuration form to set the requirements that will
  * match this action before being executed. This is a regular Drupal form and
  * may include any type of information you want, but all the fields of the
  * form will be saved into the $context variable.
  *
  * In this case we are emailing a programmatically chosen facilitator.
  *
  */
  $form['subject'] = array(
    '#title' => t('Subject'),
    '#type' => 'textfield',
    '#description' => t('Subject line of the email message.'),
    '#default_value' => isset($context['subject']) ? $context['subject'] : '',
  );
  $form['message'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
    '#description' => t('Message to send to the facilitator.'),
    '#default_value' => isset($context['message']) ? $context['message'] : '',
  );
  $form['tokens'] = array(
    '#title' => t('Available Tokens'),
    '#theme' => 'token_tree',
    '#token_types' => array('node'), // The token types that have specific context. Can be multiple token types like 'term' and/or 'user'
    '#global_types' => TRUE, // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
    '#click_insert' => TRUE, // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
  );
  // No more options, return the form.
  return $form;
}

/**
 * Validates settings form for asb_scheme_email_facilitator_action().
 * Verifies that a subject and message exist.
 */
function asb_scheme_email_facilitator_action_validate($form, $form_state) {
  if ($form_state['values']['subject'] == "" || $form_state['values']['message'] == "") {
    form_set_error(t('Please, provide a subject and message.'));
  }
}

/**
 * Submit handler for asb_scheme_email_facilitator_action.
 *
 * Returns an associative array of values which will be available in the
 * $context when an action is executed.
 */
function asb_scheme_email_facilitator_action_submit($form, $form_state) {
  return array(
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
  );
}

/**** END rules configuration ****/

/**
 * Implements civicrm_api
 *
 * @params 
 *  $type 'contact' or 'skill'
 *  $ufid - drupal user_id required for contact record.
 *
 * @returns
 * array of contact information:
 * first_name, last_name, city, state_province_name, country
 * or
 * list of skills from civi custom field
 */
function asb_scheme_civicrm_api($type = 'contact', $ufid = 0) {
  if(!isset($config)) {
    require_once(DRUPAL_ROOT .'/sites/default/civicrm.settings.php');
    require_once 'CRM/Core/Config.php';
    $config = CRM_Core_Config::singleton( );
  }
  require_once 'api/api.php';
  if ($type == 'contact') {
    try{
      $contact_id = civicrm_api3('UFMatch', 'get', array(
                    'version' => 3,
                    'sequential' => 1,
                    'uf_id' => $ufid,
                    'domain_id' => 2,
                  ));
      $params = array(
        'version' => 3,
        'sequential' => 1,
        'return' => 'first_name,last_name,city,country,email,state_province,custom_23,custom_23_label,custom_53,custom_53_label',
        'contact_id' => $contact_id['values'][0]['contact_id'],
      );
      $contacts = civicrm_api3('Contact', 'get', $params);
      $contacts['skills'] = array();
      $params = array(
          'version' => 3,
          'sequential' => 1,
          'entity_id' => 580138,
      );
      $result = civicrm_api('CustomValue', 'get', $params);
      foreach($result['values'] as $key => $value) {
        if($value['id'] == 23) {
          $skill_set = $value['latest'];
        }
      }
      // print_r($result);
      foreach($skill_set as $key => $value) {
        $option_params = array(
          'version' => 3,
          'sequential' => 1,
          'option_group_id' => 90,
          'value' => $value,
        );
        $option = civicrm_api3('OptionValue', 'get', $option_params);
        $contacts['skills'][] = $option['values'][0]['label'];
      }
      asort($contacts['skills']);
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
    }
  }elseif ($type == 'skills') {
    try{
      $contacts = civicrm_api3('OptionValue', 'get', array(
                    'version' => 3,
                    'sequential' => 1,
                    'option_group_id' => 90,
                  ));
    }
    catch (CiviCRM_API3_Exception $e) {
      $error = $e->getMessage();
    }
  }
  else {
    $contacts = '';
  }
  $result = civicrm_api('uf_match', 'get', array('version' => 3, 'uf_id' => 10));
  return $contacts;

}

function asb_scheme_get_civi_skills($skills_info, $civi_skills) {
  $civi_skills = asb_scheme_civicrm_api();
  $skills_values = array();
  foreach($civi_skills['values'] as $key => $value) {
    $skills_values[$value['value']] = $value['label'];
  }
  $diff = array_merge($skills_info['settings']['allowed_values'], $skills_values);
  // dsm($skills_info['settings']['allowed_values']);
  // dsm($diff);
  return $diff;
}

/**
 *
 * Synchronize civicrm skills field with field_people_skills
 *
 */
function _asb_scheme_update_skills() {
  $field_name = 'field_people_skills';
  $instance = field_info_field($field_name);
  // dsm($instance);
  $skills = asb_scheme_civicrm_api('skills');
  $civi_skills = asb_scheme_get_civi_skills($instance, $skills);
  $field = array(
    'field_name' => 'field_people_skills',
    'settings' => array(
      'allowed_values' => $civi_skills,
    ),
  );
  field_update_field($field);
}

/**
 * Function to quickly get username from uid
 */
function asb_scheme_get_user_name($uid) {
  $name = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
  return $name;
}

/**
 * Implements hook_preprocess_links()
 *
 * Use modals for comment forms.
 */
function asb_scheme_preprocess_links(&$variables) {
  if(isset($variables['links']['comment-reply'])) {
    $variables['links']['comment-reply']['href'] = 'modal_forms/nojs/' .$variables['links']['comment-reply']['href'];
    $variables['links']['comment-reply']['attributes']['class'][] = 'ctools-use-modal';
    $variables['links']['comment-reply']['attributes']['class'][] = 'ctools-modal-mfe-modal';
  }
}
